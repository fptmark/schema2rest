{% if inheritsBaseEntity %}
from .BaseEntity import BaseEntity
from beanie import PydanticObjectId
{% else %}
from beanie import Document
{% endif %}
from pydantic import BaseModel, Field
from typing import Optional
from datetime import datetime

{% if inheritsBaseEntity %}
class {{ entity|capitalize }}(BaseEntity):
{% else %}
class {{ entity|capitalize }}(Document):
{% endif %}
{% for field_name, field_info in fields.items() %}
    {{ field_name }}: {{ field_info|model_field }}
{% endfor %}

    class Settings:
        name = "{{ entity|lower() }}"

class {{ entity|capitalize }}Create(BaseModel):
{% for field_name, field_info in fields.items() %}
    {{ field_name }}: {{ field_info|model_field }}
{% endfor %}
    class Config:
        orm_mode = True

class {{ entity|capitalize }}Read(BaseModel):
{% if inheritsBaseEntity %}
    # Include base fields at top level in the GET response
    id: Optional[PydanticObjectId] = Field(None, alias="_id")
    createdAt: Optional[datetime] = None
    updatedAt: Optional[datetime] = None
{% endif %}
{% for field_name, field_info in fields.items() %}
    {{ field_name }}: {{ field_info|model_field }}
{% endfor %}
    class Config:
        orm_mode = True
        allow_population_by_field_name = True
        json_encoders = {PydanticObjectId: str}
