{# model.j2 #}
{% import "macros.j2" as macros %}

from beanie import Document, PydanticObjectId, before_event, Insert
from pydantic import BaseModel, Field, validator
from typing import Optional, List, Dict, Any, ClassVar
from datetime import datetime, timezone
import json
import re


class UniqueValidationError(Exception):
    def __init__(self, fields, query):
        self.fields = fields
        self.query = query
    def __str__(self):
        return f"Unique constraint violation for fields {self.fields}: {self.query}"


class {{ entity }}(Document):
{% for name, info in fields.items() %}
{{ macros.typed_field(name, info) }}
{% endfor %}

    __ui_metadata__: ClassVar[Dict[str, Any]] = {{ metadata | pprint(indent=4) }}

    class Settings:
        name = "{{ entity|lower() }}"

    @classmethod
    def get_metadata(cls) -> Dict[str, Any]:
        return cls.__ui_metadata__

{{ macros.save_method(uniques, auto_update_fields, auto_generate_fields)
   | indent(4, true) }}


class {{ entity }}Create(BaseModel):
{% for name, info in fields.items() if not info.get('autoGenerate') and not info.get('autoUpdate') %}
{{ macros.typed_field(name, info) }}
{% endfor %}

{% include "validation.j2" %}

{{ macros.orm_config() | indent(4, true) }}


class {{ entity }}Update(BaseModel):
{% for name, info in fields.items() if not info.get('autoUpdate') %}
{{ macros.typed_field(name, info) }}
{% endfor %}

{% include "validation.j2" %}

{{ macros.orm_config() | indent(4, true) }}


class {{ entity }}Read(BaseModel):
    id: PydanticObjectId = Field(alias="_id")
{% for name, info in fields.items() %}
{{ macros.typed_field(name, info) }}
{% endfor %}

{{ macros.orm_config(include_encoders=true) | indent(4, true) }}
