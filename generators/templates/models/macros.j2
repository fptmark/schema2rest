{# macros.j2 #}

{% macro typed_field(name, info) -%}
    {%- set base_type, field_init = info | model_field -%}
    {{ name }}: {% if not info.required %}Optional[{{ base_type }}] = {{ field_init }}{% else %}{{ base_type }} = {{ field_init }}{% endif %}
{% endmacro %}

{% macro orm_config(include_encoders=false) -%}
class Config:
    orm_mode = True
    {% if include_encoders %}
    allow_population_by_field_name = True
    json_encoders = {PydanticObjectId: str}
    {% endif %}
{% endmacro %}

{% macro save_method(uniques, auto_update, auto_generate) -%}
{% if uniques %}
async def validate_uniques(self):
    {% for u in uniques %}
    query_{{ loop.index }} = { {% for f in u %}"{{ f }}": self.{{ f }},{% endfor %} }
    existing_{{ loop.index }} = await self.__class__.find_one(query_{{ loop.index }})
    if existing_{{ loop.index }}:
        raise UniqueValidationError({{ u|tojson }}, query_{{ loop.index }})
    {% endfor %}

{% endif %}
{% if auto_generate %}
@before_event(Insert)
def _set_autogen(self):
    now = datetime.now(timezone.utc)
    {% for f in auto_generate %}
    self.{{ f }} = now
    {% endfor %}

{% endif %}
async def save(self, *args, **kwargs):
    {% if uniques %}
    await self.validate_uniques()
    {% endif %}
    {% if auto_update %}
    current_time = datetime.now(timezone.utc)
    {% for f in auto_update %}
    self.{{ f }} = current_time
    {% endfor %}
    {% endif %}
    return await super().save(*args, **kwargs)

{% endmacro %}
