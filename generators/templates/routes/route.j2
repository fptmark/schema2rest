{% set router_name = entity|lower ~ "_router" %}
from fastapi import APIRouter, HTTPException
from typing import List
from app.models.{{ entity|lower }}_model import {{ entity|capitalize }}, {{ entity|capitalize }}Create, {{ entity|capitalize }}Read
from beanie import PydanticObjectId
import logging

router = APIRouter()

# CREATE
@router.post('/', response_model={{ entity|capitalize }}Read)
async def create_{{ entity|lower }}(item: {{ entity|capitalize }}Create):
    logging.info("Received request to create a new {{ entity|lower }}.")
    # Instantiate a document from the model
    doc = {{ entity|capitalize }}(**item.dict(exclude_unset=True))
    try:
        await doc.save()  # This triggers BaseEntity's default factories and save() override.
        logging.info(f"{{ entity|capitalize }} created successfully with _id: {doc._id}")
    except Exception as e:
        logging.exception("Failed to create {{ entity|lower }}.")
        raise HTTPException(status_code=500, detail='Internal Server Error')
    return doc

# GET ALL
@router.get('/', response_model=List[{{ entity|capitalize }}Read])
async def get_all_{{ entity|lower }}s():
    logging.info("Received request to fetch all {{ entity|lower }}s.")
    try:
        docs = await {{ entity|capitalize }}.find_all().to_list()
        logging.info(f"Fetched {len(docs)} {{ entity|lower }}(s) successfully.")
    except Exception as e:
        logging.exception("Failed to fetch all {{ entity|lower }}s.")
        raise HTTPException(status_code=500, detail='Internal Server Error')
    return docs

# GET ONE BY ID
@router.get('/{item_id}', response_model={{ entity|capitalize }}Read)
async def get_{{ entity|lower }}(item_id: str):
    logging.info(f"Received request to fetch {{ entity|lower }} with _id: {item_id}")
    try:
        doc = await {{ entity|capitalize }}.get(PydanticObjectId(item_id))
        if not doc:
            logging.warning(f"{{ entity|capitalize }} with _id {item_id} not found.")
            raise HTTPException(status_code=404, detail='{{ entity|capitalize }} not found')
        logging.info(f"Fetched {{ entity|lower }} with _id: {item_id} successfully.")
    except HTTPException as he:
        raise he
    except Exception as e:
        logging.exception(f"Failed to fetch {{ entity|capitalize }} with _id: {item_id}")
        raise HTTPException(status_code=500, detail='Internal Server Error')
    return doc

# UPDATE
@router.put('/{item_id}', response_model={{ entity|capitalize }}Read)
async def update_{{ entity|lower }}(item_id: str, item: {{ entity|capitalize }}Create):
    logging.info(f"Received request to update {{ entity|lower }} with _id: {item_id}")
    try:
        doc = await {{ entity|capitalize }}.get(PydanticObjectId(item_id))
        if not doc:
            logging.warning(f"{{ entity|capitalize }} with _id {item_id} not found for update.")
            raise HTTPException(status_code=404, detail='{{ entity|capitalize }} not found')
        update_data = item.dict(exclude_unset=True)
        # Optionally prevent updating base fields:
        update_data.pop('_id', None)
        update_data.pop('createdAt', None)
        # For updatedAt, BaseEntity.save() will update it automatically.
        for key, value in update_data.items():
            setattr(doc, key, value)
        await doc.save()
        logging.info(f"{{ entity|capitalize }} with _id {item_id} updated successfully.")
    except HTTPException as he:
        raise he
    except Exception as e:
        logging.exception(f"Failed to update {{ entity|capitalize }} with _id: {item_id}")
        raise HTTPException(status_code=500, detail='Internal Server Error')
    return doc

# DELETE
@router.delete('/{item_id}')
async def delete_{{ entity|lower }}(item_id: str):
    logging.info(f"Received request to delete {{ entity|lower }} with _id: {item_id}")
    try:
        doc = await {{ entity|capitalize }}.get(PydanticObjectId(item_id))
        if not doc:
            logging.warning(f"{{ entity|capitalize }} with _id {item_id} not found for deletion.")
            raise HTTPException(status_code=404, detail='{{ entity|capitalize }} not found')
        await doc.delete()
        logging.info(f"{{ entity|capitalize }} with _id {item_id} deleted successfully.")
    except HTTPException as he:
        raise he
    except Exception as e:
        logging.exception(f"Failed to delete {{ entity|capitalize }} with _id: {item_id}")
        raise HTTPException(status_code=500, detail='Internal Server Error')
    return {'message': '{{ entity|capitalize }} deleted successfully'}
