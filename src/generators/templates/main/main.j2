import sys
import argparse
from pathlib import Path
from fastapi.exception_handlers import request_validation_exception_handler
from fastapi.exceptions import RequestValidationError
import app.utils as utils
from app.db import DatabaseFactory
from app.db.initializer import DatabaseInitializer
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
from fastapi.middleware.cors import CORSMiddleware
from app.errors import (
    DatabaseError, 
    ValidationError, 
    NotFoundError, 
    DuplicateError, 
    normalize_error_response
)
{# --- Dynamic Import of Service Classes --- #}
{% for service in services %}
{% set service_parts = service.split('.') %}
{% set reversed_parts = service_parts[:-1] | reverse %}
{% set service_class = reversed_parts | map('capitalize') | join('') %}
from app.services.{{ service_parts[-1] }}_provider import {{ service_class }} as {{ service_parts[0]|capitalize }}
{% endfor %}

{# --- Dynamic Import of Route Routers for Entities --- #}
{% for entity in entities %}
from app.routes.{{ entity|lower }}_router import router as {{ entity|lower }}_router
from app.models.{{ entity|lower }}_model import {{ entity }}

{% endfor %}

import logging

def parse_args():
    """Parse command line arguments"""
    parser = argparse.ArgumentParser(description='Events API Server')
    parser.add_argument('config_file', nargs='?', default='config.json',
                       help='Configuration file path (default: config.json)')
    parser.add_argument('--log-level', 
                       choices=['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'],
                       help='Override log level from config')
    parser.add_argument('--initdb', action='store_true',
                       help='Initialize database: create missing indexes, remove unused indexes, then exit')
    return parser.parse_args()

# Parse command line arguments
args = parse_args()

LOG_FILE = "app.log"
config = utils.load_system_config(args.config_file)
is_dev = config.get('environment', 'production') == 'development'
project = config.get('project_name', 'Project Name Here')
my_log_level = (args.log_level or 
               config.get('log_level', 'info' if is_dev else 'warning')).upper()

logging.basicConfig(
    level=my_log_level,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.StreamHandler(sys.stdout),  # Output to console
        logging.FileHandler(LOG_FILE, mode="a"),  # Write to a log file
    ],
)
logger = logging.getLogger(__name__)

# Add the project root to PYTHONPATH
sys.path.append(str(Path(__file__).resolve().parent.parent))

# Create the FastAPI app.
app = FastAPI(
    # Enable automatic slash handling and include both versions in OpenAPI schema
    include_in_schema=True,
    # Disable Starlette's built-in exception middleware so our handlers work
    exception_handlers={}
)

# Add CORS middleware
ui_port = config.get('ui_port', 4200)
server_port = config.get('server_port', 5500)
cors_origins = [
    f"http://localhost:{ui_port}",  # Angular dev server
    f"http://localhost:{server_port}"  # Backend API server
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=cors_origins,
    allow_credentials=True,
    allow_methods=[
        "GET",
        "POST",
        "PUT",
        "PATCH",
        "DELETE",
        "OPTIONS",
    ],
    allow_headers=["*"],
    max_age=3600,             # cache preflight for 1 hour
)

{# --- Dynamic Registration of Routers for Entities --- #}
{% for entity in entities %}
app.include_router({{ entity|lower }}_router, prefix='/api/{{ entity|lower }}', tags=['{{ entity|title }}'])
{% endfor %}

@app.exception_handler(DatabaseError)
async def database_error_handler(request: Request, exc: DatabaseError):
    """Handle database errors"""
    logger.error(f"Database error: {exc}")
    return JSONResponse(
        status_code=500,
        content=normalize_error_response(exc, str(request.url.path))
    )

@app.exception_handler(ValidationError)
async def validation_error_handler(request: Request, exc: ValidationError):
    """Handle validation errors"""
    logger.error(f"Validation error: {exc}")
    return JSONResponse(
        status_code=422,
        content=normalize_error_response(exc, str(request.url.path))
    )

@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request: Request, exc: RequestValidationError):
    """Handle FastAPI request validation errors"""
    return JSONResponse(
        status_code=422,
        content=normalize_error_response(exc, str(request.url.path))
    )

@app.exception_handler(NotFoundError)
async def not_found_error_handler(request: Request, exc: NotFoundError):
    return JSONResponse(
        status_code=404,
        content=normalize_error_response(exc, str(request.url.path))
    )

@app.exception_handler(DuplicateError)
async def duplicate_error_handler(request: Request, exc: DuplicateError):
    return JSONResponse(
        status_code=409,
        content=normalize_error_response(exc, str(request.url.path))
    )

@app.exception_handler(Exception)
async def unhandled_exception_handler(request: Request, exc: Exception):
    """Handle any unhandled exceptions"""
    logger.error(f"Unhandled exception: {str(exc)}", exc_info=True)
    return JSONResponse(
        status_code=500,
        content=normalize_error_response(exc, str(request.url.path))
    )

@app.on_event('startup')
async def startup_event():
    db_type = config.get('database', None)
    db_uri = config.get('db_uri', None)
    db_name = config.get('db_name', None)

    if db_uri and db_name and db_type:
        logger.info('Startup event called')
        logger.info(f"Running in {'development' if config.get('environment', 'production') == 'development' else 'production'} mode")
        logger.info(f"Connecting to {db_type} datastore at {db_uri} with db {db_name}")
        
        # Create and initialize database instance
        try:
            db = DatabaseFactory.create(db_type)
            await db.init(db_uri, db_name)
            DatabaseFactory.set_instance(db, db_type)
            logger.info(f"Connected to {db_type} successfully")
        except Exception as e:
            logger.error(f"Failed to initialize {db_type} database: {str(e)}")
            sys.exit(1)
        
        # Handle --initdb flag
        if args.initdb:
            logger.info("--initdb flag specified, initializing database schema")
            try:
                initializer = DatabaseInitializer(db)
                await initializer.initialize_database()
                logger.info("Database initialization completed. Exiting.")
                await db.close()
                sys.exit(0)
            except Exception as e:
                logger.error(f"Database initialization failed: {str(e)}")
                await db.close()
                sys.exit(1)
        
        # Initialize the auth service from the hard-coded import.  Need to init all services here
        print(f'>>> Initializing service auth.cookies.redis')
        await Auth.initialize(config['auth.cookies.redis'])
    else:
        logger.error("No db_uri or db_name provided in config.json. Exiting.")
        sys.exit(1)

@app.on_event('shutdown')
async def shutdown_event():
    """Clean up database connections on shutdown"""
    logger.info('Shutdown event called')
    await DatabaseFactory.close()
    logger.info('Database connections closed')

@app.get('')
def read_root():
    return {'message': f'Welcome to the {project} Management System'}

@app.get('/api/metadata')
def get_entities_metadata():
    return  {
        "projectName": project,
        "entities": [
        {% for entity in entities %}
            {{ entity }}.get_metadata(),
        {% endfor %}
        ]
    }

if __name__ == '__main__':
    import uvicorn
    logger.info("Welcome to the {{ project_name }} Management System")
    my_host = config.get('host', '0.0.0.0')
    my_port = config.get('server_port', 8000)
    logger.info(f' Access Swagger docs at http://{my_host}:{my_port}/docs')
    uvicorn.run(
        'app.main:app',
        host=my_host,
        port=my_port,
        reload=is_dev,
        reload_dirs=['app'] if is_dev else None,
        log_level=my_log_level.lower(),
        proxy_headers=True,
        forwarded_allow_ips='*'
    )

