{# templates/services/service_routes.j2 #}
from fastapi import APIRouter, Request, Response, HTTPException, Query
from typing import Dict, Any

# Dynamically import the concrete service implementation.
{% set service_parts = service.split('.') %}
{% set reversed_parts = service_parts[:-1] | reverse %}
{% set service_class = reversed_parts | map('capitalize') | join('') %}
from {{ module_path }}_provider import {{ service_class }}

# For metadata access
from app.models.{{ entity|lower }}_model import {{ entity }}

router = APIRouter()

# Helper function to wrap response with metadata
def wrap_response(data, include_metadata=True):
    """Wrap response data with metadata for UI generation."""
    if not include_metadata:
        return data
    
    result = {
        "data": data,
    }
    
    # Add metadata if requested
    if include_metadata:
        result["metadata"] = {{ entity }}.get_metadata()
    
    return result

{% for ep in endpoints %}
    {% set ep_path = ep.metadata.route if ep.metadata.route != "" else "/" ~ ep.name.lower() %}
    {% set ep_summary = ep.metadata.summary if ep.metadata.summary != "" else ep.name.capitalize() %}
@router.{{ ep.metadata.method.lower() }}("{{ ep_path }}", summary="{{ ep_summary }}")
async def {{ ep.name }}_endpoint(request: Request, response: Response, include_metadata: bool = True):
    try:
        payload = await request.json()
    except Exception:
        raise HTTPException(status_code=400, detail="Invalid request body")
    try:
        result = await {{ service_class }}().{{ ep.name }}(payload)
        return wrap_response(result, include_metadata)
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

{% endfor %}

# GET METADATA
@router.get('/metadata', summary="Get metadata")
async def get_{{ entity|lower }}_metadata():
    """Get metadata for {{ entity }} entity."""
    return {{ entity }}.get_metadata()

def init_router(app):
    app.include_router(router, prefix="/{{ entity | lower }}/{{ service[0] | lower }}", tags=["{{ entity }}"])
