{# templates/services/service_routes.j2 #}
from fastapi import APIRouter, Request, Response, HTTPException

# Dynamically import the concrete service implementation.
from {{ module_path }} import {{ concrete_class }} as {{ alias }}

# Dynamically import all response models from the base_model.
from {{ base_model_module }} import *

router = APIRouter()

{% for ep in endpoints %}
    {% set ep_path = ep.metadata.route if ep.metadata.route != "" else "/" ~ ep.name.lower() %}
    {% set ep_summary = ep.metadata.summary if ep.metadata.summary != "" else ep.name.capitalize() %}
    {# If a response_model is specified in metadata, use it; otherwise omit the parameter #}
    {% if ep.metadata.response_model != "" %}
@router.{{ ep.metadata.method.lower() }}("{{ ep_path }}", summary="{{ ep_summary }}", response_model={{ ep.metadata.response_model }})
    {% else %}
@router.{{ ep.metadata.method.lower() }}("{{ ep_path }}", summary="{{ ep_summary }}")
    {% endif %}
async def {{ ep.name }}_endpoint(request: Request, response: Response):
    try:
        payload = await request.json()
    except Exception:
        raise HTTPException(status_code=400, detail="Invalid request body")
    try:
        result = await {{ alias }}().{{ ep.name }}(payload)
        return result
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

{% endfor %}

def init_router(app):
    app.include_router(router, prefix="/{{ entity | lower }}/{{ top_service | lower }}", tags=["{{ entity }}"])
