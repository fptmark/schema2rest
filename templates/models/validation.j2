{# Template for field validation logic - can be included by other templates #}
{# This template expects 'fields' to be defined in the parent context #}
{# Custom validators for fields with constraints #}
{% for field_name, field_info in fields.items() %}
    {% set ns = namespace(messages={}) %}
    {% for key, value in field_info.items() %}
        {% if key.endswith('.message') %}
            {% set ns.messages = ns.messages | combine({ key[:-8]: value }) %}
        {% endif %}
    {% endfor %}
    {% if field_info.get('enum') is not none or field_info.get('pattern') is not none or field_info.get('minLength') is not none or field_info.get('maxLength') is not none or field_info.get('min') is not none or field_info.get('max') is not none %}
    @validator('{{ field_name }}')
    def validate_{{ field_name }}(cls, v):
        _custom = {{ ns.messages|tojson }}
        {% if field_info.get('type') in ['String', 'str'] %}
            {% if field_info.get('minLength') is not none %}
        if v is not None and len(v) < {{ field_info.get('minLength') }}:
                {% if ns.messages.get('minLength') is not none %}
            raise ValueError(_custom["minLength"])
                {% else %}
            raise ValueError("{{ field_name }} must be at least {{ field_info.get('minLength') }} characters")
                {% endif %}
            {% endif %}
            {% if field_info.get('maxLength') is not none %}
        if v is not None and len(v) > {{ field_info.get('maxLength') }}:
                {% if ns.messages.get('maxLength') is not none %}
            raise ValueError(_custom["maxLength"])
                {% else %}
            raise ValueError("{{ field_name }} must be at most {{ field_info.get('maxLength') }} characters")
                {% endif %}
            {% endif %}
            {% if field_info.get('pattern') is not none %}
        if v is not None and not re.match(r'{{ field_info.get("pattern") }}', v):
                {% if ns.messages.get('pattern') is not none %}
            raise ValueError(_custom["pattern"])
                {% else %}
            raise ValueError("{{ field_name }} is not in the correct format")
                {% endif %}
            {% endif %}
        {% endif %}
        {% if field_info.get('enum') is not none %}
        allowed = {{ field_info.get('enum')|tojson }}
        if v is not None and v not in allowed:
            {% if ns.messages.get('enum') is not none %}
            raise ValueError(_custom["enum"])
            {% else %}
            raise ValueError("{{ field_name }} must be one of " + ", ".join(allowed))
            {% endif %}
        {% endif %}
        {% if field_info.get('min') is not none %}
        if v is not None and v < {{ field_info.get('min') }}:
            {% if ns.messages.get('min') is not none %}
            raise ValueError(_custom["min"])
            {% else %}
            raise ValueError("{{ field_name }} must be at least {{ field_info.get('min') }}")
            {% endif %}
        {% endif %}
        {% if field_info.get('max') is not none %}
        if v is not None and v > {{ field_info.get('max') }}:
            {% if ns.messages.get('max') is not none %}
            raise ValueError(_custom["max"])
            {% else %}
            raise ValueError("{{ field_name }} must be at most {{ field_info.get('max') }}")
            {% endif %}
        {% endif %}
        return v
    {% endif %}
{% endfor %}